version: 2.1
orbs:
  cypress: cypress-io/cypress@1.26.0
commands:
  deploy:
    description: "Deployment of webapp"
    parameters:
      hostname:
        type: string
        default: "ssh.staging.openchs.org"
    steps:
      - attach_workspace:
          at: ~/artifacts

      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install make openssl python3-pip
            sudo pip3 install awscli --upgrade

      - run:
          name: Copy build to server
          command: |
            scp -o StrictHostKeyChecking=no ~/artifacts/openchs-webapp.zip ec2-user@<< parameters.hostname >>:/tmp

      - run:
          name: Deploy app
          command: |
            ssh -o StrictHostKeyChecking=no ec2-user@<< parameters.hostname >> \<< EOF
            sudo rm -rf /opt/openchs-webapp/*
            sudo unzip -qq /tmp/openchs-webapp.zip -d /opt/openchs-webapp
            sudo rm -rf /tmp/openchs-webapp.zip
            EOF

      - run:
          name: Deploy translations
          command: |
            cd ~/artifacts
            npm install https://github.com/avniproject/openchs-idi#b6c57e051b91ed4bc2634f4f087dba51cc3a01c8
            echo deploy_platform_translations_${CIRCLE_JOB%_deploy} | tr '[:upper:]' '[:lower:]' | xargs make || true

jobs:
  app_test:
    docker:
      - image: cimg/node:20.2.0

    working_directory: ~/openchs-webapp

    steps:
      - checkout

      - run: yarn install

      - run: yarn test

  app_build:
    docker:
      - image: cimg/node:20.2.0
    resource_class: medium+

    working_directory: ~/openchs-webapp

    steps:
      - checkout

      - run: yarn install

      - run: yarn run build

      - run: cd build; zip -r ../openchs-webapp.zip *

      - run: tar -czvf avni-webapp.tgz -C build .

      - run: mkdir -p ~/artifacts/translations

      - run: mkdir -p ~/artifacts/scripts

      - run: echo $CIRCLE_BUILD_NUM > ~/artifacts/build_version

      - run: cp ~/openchs-webapp/openchs-webapp.zip ~/artifacts/

      - run: cp ~/openchs-webapp/avni-webapp.tgz ~/artifacts/

      - run: cp ~/openchs-webapp/Makefile ~/artifacts/

      - run: cp ~/openchs-webapp/translations/*.json ~/artifacts/translations/

      - run: cp ~/openchs-webapp/scripts/token.js ~/artifacts/scripts/

      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - build_version
            - openchs-webapp.zip
            - avni-webapp.tgz
            - Makefile
            - translations/*.json
            - scripts/token.js

      - store_artifacts:
          path: ~/artifacts
  
  build_docker_image:
    docker:
      - image: docker:latest
    resource_class: medium
    working_directory: ~/openchs-webapp
    steps:
      - checkout
      - attach_workspace:
          at: ~/artifacts

      - setup_remote_docker

      - run: mkdir -p build

      - run: unzip ~/artifacts/openchs-webapp.zip -d build

      - run:
          name: Determine Docker Tags
          command: |
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              DOCKER_TAG="latest"
            elif [ -n "$CIRCLE_TAG" ]; then
              DOCKER_TAG="$CIRCLE_TAG"
            else
              echo "No valid tag found. Exiting."
              exit 1
            fi
            echo "export DOCKER_TAG=$DOCKER_TAG" >> $BASH_ENV
          shell: /bin/sh

      - run:
          name: Authenticate with Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run:
          name: Build Multi-Platform Docker Image
          command: |
            source $BASH_ENV
            docker buildx create --use
            docker buildx build --platform linux/amd64,linux/arm64 --tag "$DOCKER_USERNAME/avni-webapp:${DOCKER_TAG}" --push -f Dockerfile .
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              SHORT_CIRCLE_SHA=$(echo "$CIRCLE_SHA1" | cut -c1-6)
              docker buildx build --platform linux/amd64,linux/arm64 --tag "$DOCKER_USERNAME/avni-webapp:${SHORT_CIRCLE_SHA}" --push -f Dockerfile .
            fi
  
  STAGING_deploy:
    docker:
      - image: cimg/node:20.2.0
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.staging.openchs.org"

  PRERELEASE_deploy:
    docker:
      - image: cimg/node:20.2.0
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.prerelease.openchs.org"

  PERF_deploy:
    docker:
      - image: cimg/node:20.2.0
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.perf.avniproject.org"

  PRODUCTION_deploy:
    docker:
      - image: cimg/node:20.2.0
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.server.openchs.org"

tags_filter: &tags_filter
  filters:
    tags:
      only: /.*/

workflows:
  version: 2
  test_and_build:
    jobs:
      - app_test:
          <<: *tags_filter
      - app_build:
          <<: *tags_filter
          requires:
            - app_test
      - build_docker_image:
          context: dockerhub
          requires:
            - app_build
          filters:
            tags:
              only: /.*/
            branches:
              only: master
      - STAGING_approve:
          type: approval
          requires:
            - app_build
      - STAGING_deploy:
          context: non-prod-deploy
          requires:
            - STAGING_approve
      - cypress/run:
          type: approval
          yarn: true
          store_artifacts: true
          requires:
            - STAGING_deploy
          post-steps:
            - store_test_results:
                path: cypress/results
      - PERF_approve:
          type: approval
          requires:
            - app_build
      - PERF_deploy:
          context: non-prod-deploy
          requires:
            - PERF_approve
      - PRERELEASE_approve:
          type: approval
          requires:
            - app_build
      - PRERELEASE_deploy:
          context: non-prod-deploy
          requires:
            - PRERELEASE_approve
      - PRODUCTION_approve:
          type: approval
          requires:
            - app_build
      - PRODUCTION_deploy:
          context: prod-deploy
          requires:
            - PRODUCTION_approve

notify:
  webhooks:
    - url: https://webhooks.gitter.im/e/0fdffde721194986f2a0
